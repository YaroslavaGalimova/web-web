package ru.itmo.wp.model.repository.impl;
import ru.itmo.wp.model.domain.User;
import ru.itmo.wp.model.exception.RepositoryException;
import ru.itmo.wp.model.repository.UserRepository;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

@SuppressWarnings("SqlNoDataSourceInspection")
public class UserRepositoryImpl extends BasicRepositoryImpl implements UserRepository {

    private String selectWhereCommand(List<String> params) {
        StringBuilder sb = new StringBuilder("SELECT * FROM User WHERE ");
        boolean first = true;
        for (String p : params) {
            if (!first) {
                sb.append("AND ");
            }
            sb.append(p).append("=? ");
            first = false;
        }
        return sb.toString();
    }

    @Override
    public User find(long id) {
        ResultSet resultSet = getResultSet(selectWhereCommand(List.of("id")), false, List.of(id));
        return findUser(resultSet);
    }

    @Override
    public User findByLogin(String login) {
        ResultSet resultSet = getResultSet(selectWhereCommand(List.of("login")), false, List.of(login));
        return findUser(resultSet);
    }

    @Override
    public User findByLoginAndPasswordSha(String login, String passwordSha) {
        ResultSet resultSet = getResultSet(selectWhereCommand(List.of("login", "passwordSha")), false,  List.of(login, passwordSha));
        return findUser(resultSet);
    }

    @Override
    public User findUserByEmailAndPasswordSha(String email, String passwordSha) {
        ResultSet resultSet = getResultSet(selectWhereCommand(List.of("email", "passwordSha")), false, List.of(email, passwordSha));
        return findUser(resultSet);
    }

    @Override
    public User findByEmail(String email) {
        ResultSet resultSet = getResultSet(selectWhereCommand(List.of("email")), false, List.of(email));
        return findUser(resultSet);
    }

    @Override
    public List<User> findAll() {
        List<User> users = new ArrayList<>();
        ResultSet resultSet = getResultSet("SELECT * FROM User ORDER BY id DESC", false, null);
        User user;
        while ((user = findUser(resultSet)) != null) {
            users.add(user);
        }
        return users;
    }

    @Override
    public Long findCount() {
        ResultSet resultSet = getResultSet("SELECT COUNT(*) FROM User", false, null);
        try {
            if (resultSet.next()) {
                return resultSet.getLong(1);
            } else {
                throw new RepositoryException("Can't find User count.");
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't get number of users", e);
        }
    }

    @Override
    public void save(User user, String passwordSha) {
        ResultSet resultSet = getResultSet("INSERT INTO `User` (`login`, `passwordSha`, `creationTime`, `email`) VALUES (?, ?, NOW(), ?)",
                                            true, List.of(user.getLogin(), passwordSha, user.getEmail()));
        try {
            if (resultSet.next()) {
                user.setId(resultSet.getLong(1));
                user.setCreationTime(find(user.getId()).getCreationTime());
            } else {
                throw new RepositoryException("Can't save User [no autogenerated fields].");
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't save User.", e);
        }
    }

    private User toUser(ResultSetMetaData metaData, ResultSet resultSet) throws SQLException {
        if (!resultSet.next()) {
            return null;
        }

        User user = new User();
        for (int i = 1; i <= metaData.getColumnCount(); i++) {
            switch (metaData.getColumnName(i)) {
                case "id":
                    user.setId(resultSet.getLong(i));
                    break;
                case "login":
                    user.setLogin(resultSet.getString(i));
                    break;
                case "creationTime":
                    user.setCreationTime(resultSet.getTimestamp(i));
                    break;
                case "email":
                    user.setEmail(resultSet.getString(i));
                default:
                    // No operations.
            }
        }

        return user;
    }

    private User findUser(ResultSet resultSet) {
        try {
            User user =  toUser(resultSet.getMetaData(), resultSet);
            resultSet.close();
            return user;
        } catch (SQLException e) {
            throw new RepositoryException("Can't create user.", e);
        }
    }
}